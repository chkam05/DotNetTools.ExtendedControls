<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:chkam05.Tools.ControlsEx"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes">

    <Style x:Key="TreeViewItemEx.FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="TreeViewItemEx.ExpandCollapseToggleControlTemplate" TargetType="{x:Type ToggleButton}">
        <Border
            Background="Transparent">

            <materialDesign:PackIcon
                x:Name="ExpandPath"
                Foreground="{Binding ExpanderIconColorBrush, RelativeSource={RelativeSource AncestorType={x:Type local:TreeViewItemEx}}}"
                Kind="KeyboardArrowDown"
                Margin="{Binding ExpanderIconMargin, RelativeSource={RelativeSource AncestorType={x:Type local:TreeViewItemEx}}}"/>
            
        </Border>
        <ControlTemplate.Triggers>
            
            <!-- Is Checked -->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Kind" TargetName="ExpandPath" Value="KeyboardArrowUp"/>
            </Trigger>
            
            <!-- Is Mouse Over -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" TargetName="ExpandPath" Value="{Binding MouseOverExpanderIconColorBrush, RelativeSource={RelativeSource AncestorType={x:Type local:TreeViewItemEx}}}"/>
            </Trigger>
            
            <!-- Is Mouse Over & Is Checked -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsChecked" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" TargetName="ExpandPath" Value="{Binding MouseOverExpanderIconColorBrush, RelativeSource={RelativeSource AncestorType={x:Type local:TreeViewItemEx}}}"/>
            </MultiTrigger>
            
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="TreeViewItemEx.ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Template" Value="{StaticResource TreeViewItemEx.ExpandCollapseToggleControlTemplate}"/>
        <Setter Property="Width" Value="16"/>
    </Style>

    <ControlTemplate x:Key="TreeViewItemEx.ControlTemplate" TargetType="{x:Type local:TreeViewItemEx}">
        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition MinWidth="16" Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition/>
            </Grid.RowDefinitions>

            <ToggleButton
                x:Name="Expander"
                ClickMode="Press"
                Grid.Column="0"
                Grid.Row="0"
                IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource TreeViewItemEx.ExpandCollapseToggleStyle}"
                VerticalAlignment="Center"/>

            <Border
                x:Name="Bd"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{TemplateBinding CornerRadius}"
                Grid.Column="1"
                Grid.Row="0"
                Padding="{TemplateBinding Padding}"
                SnapsToDevicePixels="true">

                <ContentPresenter
                    x:Name="PART_Header"
                    ContentSource="Header"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    TextBlock.Foreground="{TemplateBinding Foreground}"
                    VerticalAlignment="Center"/>
            </Border>

            <ItemsPresenter
                x:Name="ItemsHost"
                Grid.ColumnSpan="2"
                Grid.Column="1"
                Grid.Row="1"/>
            
        </Grid>

        <ControlTemplate.Triggers>
            
            <!-- Is Expanded -->
            <Trigger Property="IsExpanded" Value="false">
                <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
            </Trigger>
            
            <!-- Has Items -->
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
            </Trigger>

            <!-- Is Mouse Over -->
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" TargetName="Bd" Value="{Binding MouseOverBackground, RelativeSource={RelativeSource AncestorType={x:Type local:TreeViewItemEx}}}"/>
                <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:TreeViewItemEx}}}"/>
                <Setter Property="TextBlock.Foreground" TargetName="PART_Header" Value="{Binding MouseOverForeground, RelativeSource={RelativeSource AncestorType={x:Type local:TreeViewItemEx}}}"/>
            </Trigger>
            
            <!-- Is Selected -->
            <Trigger Property="IsSelected" Value="true">
                <Setter Property="Background" TargetName="Bd" Value="{Binding SelectedBackground, RelativeSource={RelativeSource AncestorType={x:Type local:TreeViewItemEx}}}"/>
                <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding SelectedBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:TreeViewItemEx}}}"/>
                <Setter Property="TextBlock.Foreground" TargetName="PART_Header" Value="{Binding SelectedForeground, RelativeSource={RelativeSource AncestorType={x:Type local:TreeViewItemEx}}}"/>
            </Trigger>
            
            <!-- Is Selected and Selection Active -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="Bd" Value="{Binding SelectedInactiveBackground, RelativeSource={RelativeSource AncestorType={x:Type local:TreeViewItemEx}}}"/>
                <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding SelectedInactiveBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:TreeViewItemEx}}}"/>
                <Setter Property="TextBlock.Foreground" TargetName="PART_Header" Value="{Binding SelectedInactiveForeground, RelativeSource={RelativeSource AncestorType={x:Type local:TreeViewItemEx}}}"/>
            </MultiTrigger>
            
            <!-- Is Disabled -->
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.56"/>
            </Trigger>
            
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="TreeViewItemExStyle" TargetType="{x:Type local:TreeViewItemEx}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemEx.FocusVisual}"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="4,0"/>
        <Setter Property="Template" Value="{StaticResource TreeViewItemEx.ControlTemplate}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>

        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>