<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:conv="clr-namespace:chkam05.Tools.ControlsEx.Converters"
    xmlns:local="clr-namespace:chkam05.Tools.ControlsEx"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:theme="clr-namespace:chkam05.Tools.ControlsEx.Data.Theme"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <conv:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
    <x:Static x:Key="ThemeMgr" Member="theme:ThemeManager.Instance"/>

    <ControlTemplate x:Key="WideViewButtonEx.ControlTemplate" TargetType="{x:Type local:WideViewButtonEx}">
        <Border
            x:Name="border"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{TemplateBinding CornerRadius}"
            Padding="{TemplateBinding Padding}">

            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <materialDesign:PackIcon
                    x:Name="packIcon"
                    Grid.Column="0"
                    Height="Auto"
                    HorizontalAlignment="Stretch"
                    Kind="{TemplateBinding IconKind}"
                    Margin="{TemplateBinding IconMargin}"
                    Width="{Binding Height, ElementName=packIcon}"
                    VerticalAlignment="Stretch"/>

                <StackPanel
                    Grid.Column="1"
                    HorizontalAlignment="Left"
                    Margin="{TemplateBinding TitleDescriptionMargin}"
                    VerticalAlignment="Center">

                    <TextBlock
                        FontSize="14"
                        FontWeight="Bold"
                        Text="{TemplateBinding Title}"/>

                    <TextBlock
                        Text="{TemplateBinding Description}"/>

                </StackPanel>

                <ContentPresenter
                    x:Name="contentPresenter"
                    Grid.Column="2"
                    Content="{TemplateBinding Content}"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    Margin="{TemplateBinding ContentMargin}"
                    MinWidth="{TemplateBinding ContentMinWidth}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                <materialDesign:PackIcon
                    x:Name="navPackIcon"
                    Grid.Column="3"
                    Height="Auto"
                    HorizontalAlignment="Stretch"
                    Kind="ChevronRight"
                    Margin="{TemplateBinding NavIconMargin}"
                    Width="{Binding Height, ElementName=navPackIcon}"
                    VerticalAlignment="Stretch"
                    Visibility="{Binding IsClickAssigned, RelativeSource={RelativeSource AncestorType={x:Type local:WideViewButtonEx}}, Converter={StaticResource BoolToVisibilityConverter}}"/>
            </Grid>
        </Border>
        
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" TargetName="border" Value="{Binding BackgroundInactive, RelativeSource={RelativeSource AncestorType={x:Type local:WideViewButtonEx}}}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{Binding BorderBrushInactive, RelativeSource={RelativeSource AncestorType={x:Type local:WideViewButtonEx}}}"/>
                <Setter Property="Foreground" TargetName="packIcon" Value="{Binding ForegroundInactive, RelativeSource={RelativeSource AncestorType={x:Type local:WideViewButtonEx}}}"/>
                <Setter Property="Foreground" TargetName="navPackIcon" Value="{Binding ForegroundInactive, RelativeSource={RelativeSource AncestorType={x:Type local:WideViewButtonEx}}}"/>
                <Setter Property="Opacity" TargetName="border" Value="{Binding OpacityInactive, RelativeSource={RelativeSource AncestorType={x:Type local:WideViewButtonEx}}}"/>
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{Binding ForegroundInactive, RelativeSource={RelativeSource AncestorType={x:Type local:WideViewButtonEx}}}"/>
            </Trigger>

            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource AncestorType={x:Type local:WideViewButtonEx}}}"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsClickAssigned" Value="True"/>
                </MultiTrigger.Conditions>
                
                <Setter TargetName="border" Property="Background" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource AncestorType={x:Type local:WideViewButtonEx}}}"/>
                <Setter TargetName="border" Property="BorderBrush" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource AncestorType={x:Type local:WideViewButtonEx}}}"/>
                <Setter Property="Foreground" TargetName="packIcon" Value="{Binding ForegroundMouseOver, RelativeSource={RelativeSource AncestorType={x:Type local:WideViewButtonEx}}}"/>
                <Setter Property="Foreground" TargetName="navPackIcon" Value="{Binding ForegroundMouseOver, RelativeSource={RelativeSource AncestorType={x:Type local:WideViewButtonEx}}}"/>
                <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{Binding ForegroundMouseOver, RelativeSource={RelativeSource AncestorType={x:Type local:WideViewButtonEx}}}"/>
            </MultiTrigger>
            
            <!--Trigger Property="IsMouseOver" Value="True">
                
            </Trigger-->

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True"/>
                    <Condition Property="IsClickAssigned" Value="True"/>
                </MultiTrigger.Conditions>

                <Setter TargetName="border" Property="Background" Value="{Binding BackgroundPressed, RelativeSource={RelativeSource AncestorType={x:Type local:WideViewButtonEx}}}"/>
                <Setter TargetName="border" Property="BorderBrush" Value="{Binding BorderBrushPressed, RelativeSource={RelativeSource AncestorType={x:Type local:WideViewButtonEx}}}"/>
                <Setter Property="Foreground" TargetName="packIcon" Value="{Binding ForegroundPressed, RelativeSource={RelativeSource AncestorType={x:Type local:WideViewButtonEx}}}"/>
                <Setter Property="Foreground" TargetName="navPackIcon" Value="{Binding ForegroundPressed, RelativeSource={RelativeSource AncestorType={x:Type local:WideViewButtonEx}}}"/>
                <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{Binding ForegroundPressed, RelativeSource={RelativeSource AncestorType={x:Type local:WideViewButtonEx}}}"/>
            </MultiTrigger>
            
            <!--Trigger Property="IsPressed" Value="True">
                
            </Trigger-->
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="WideViewButtonExStyle" TargetType="{x:Type local:WideViewButtonEx}">
        <Setter Property="Background" Value="{Binding DataContext.AccentBackground, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BackgroundInactive" Value="{Binding DataContext.BackgroundInactive, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BackgroundMouseOver" Value="{Binding DataContext.AccentBackgroundMouseOver, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BackgroundPressed" Value="{Binding DataContext.AccentBackgroundPressed, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BorderBrush" Value="{Binding DataContext.AccentBorderBrush, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BorderBrushInactive" Value="{Binding DataContext.BackgroundInactive, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding DataContext.AccentBorderBrushMouseOver, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BorderBrushPressed" Value="{Binding DataContext.AccentBorderBrushPressed, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="4"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{Binding DataContext.AccentForeground, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="ForegroundInactive" Value="{Binding DataContext.ForegroundInactive, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="ForegroundMouseOver" Value="{Binding DataContext.AccentForegroundMouseOver, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="ForegroundPressed" Value="{Binding DataContext.AccentForegroundPressed, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Margin" Value="4,2"/>
        <Setter Property="OpacityInactive" Value="{Binding DataContext.OpacityInactive, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Template" Value="{StaticResource WideViewButtonEx.ControlTemplate}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

</ResourceDictionary>