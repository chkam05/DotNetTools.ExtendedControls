<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:conv="clr-namespace:chkam05.Tools.ControlsEx.Converters"
    xmlns:local="clr-namespace:chkam05.Tools.ControlsEx"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:theme="clr-namespace:chkam05.Tools.ControlsEx.Data.Theme"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <conv:InnerCornerRadiusConverter x:Key="InnerCornerRadiusConverter"/>
    <x:Static x:Key="ThemeMgr" Member="theme:ThemeManager.Instance"/>

    <ControlTemplate x:Key="ExpanderEx.ControlTemplate" TargetType="{x:Type local:ExpanderEx}">
        <Border
            x:Name="border"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{TemplateBinding CornerRadius}"
            SnapsToDevicePixels="true">

            <DockPanel>
                <local:ToggleButtonEx
                    x:Name="HeaderSite"
                    Background="{TemplateBinding HeaderBackground}"
                    BackgroundChecked="{TemplateBinding HeaderBackground}"
                    BackgroundInactive="{TemplateBinding BackgroundInactive}"
                    BackgroundMouseOver="{TemplateBinding HeaderBackgroundMouseOver}"
                    BackgroundPressed="{TemplateBinding HeaderBackgroundPressed}"
                    BorderBrush="{TemplateBinding HeaderBorderBrush}"
                    BorderBrushChecked="{TemplateBinding HeaderBorderBrush}"
                    BorderBrushInactive="{TemplateBinding BorderBrushInactive}"
                    BorderBrushMouseOver="{TemplateBinding HeaderBorderBrushMouseOver}"
                    BorderBrushPressed="{TemplateBinding HeaderBorderBrushPressed}"
                    BorderThickness="{TemplateBinding HeaderBorderThickness}"
                    DockPanel.Dock="Top"
                    FontFamily="{TemplateBinding FontFamily}"
                    FontSize="{TemplateBinding FontSize}"
                    FontStretch="{TemplateBinding FontStretch}"
                    FontStyle="{TemplateBinding FontStyle}"
                    FontWeight="{TemplateBinding FontWeight}"
                    Foreground="{TemplateBinding HeaderForeground}"
                    ForegroundChecked="{TemplateBinding HeaderForeground}"
                    ForegroundInactive="{TemplateBinding ForegroundInactive}"
                    ForegroundMouseOver="{TemplateBinding HeaderForegroundMouseOver}"
                    ForegroundPressed="{TemplateBinding HeaderForegroundPressed}"
                    HorizontalContentAlignment="Stretch"
                    IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                    MinHeight="0"
                    MinWidth="0"
                    OpacityInactive="1"
                    Padding="{TemplateBinding HeaderPadding}"
                    VerticalContentAlignment="Stretch">

                    <local:ToggleButtonEx.CornerRadius>
                        <MultiBinding
                            Converter="{StaticResource InnerCornerRadiusConverter}"
                            ConverterParameter="topLeft;topRight;bottomLeft:0;bottomRight:0">
                            <Binding
                                Path="CornerRadius"
                                Mode="OneWay"
                                RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ExpanderEx}}"/>
                        </MultiBinding>
                    </local:ToggleButtonEx.CornerRadius>

                    <Grid
                        Background="Transparent"
                        SnapsToDevicePixels="False">

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="HeaderColumn0" Width="*"/>
                            <ColumnDefinition x:Name="HeaderColumn1" Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="HeaderRow0" Height="Auto"/>
                            <RowDefinition x:Name="HeaderRow1" Height="0"/>
                        </Grid.RowDefinitions>

                        <TextBlock
                            x:Name="headerTitle"
                            Grid.Column="0"
                            Grid.Row="0"
                            HorizontalAlignment="Left"
                            Text="{TemplateBinding Header}"
                            VerticalAlignment="Center"/>

                        <materialDesign:PackIcon
                            x:Name="headerIcon"
                            Grid.Column="1"
                            Grid.Row="0"
                            Height="{TemplateBinding HeaderIconHeight}"
                            HorizontalAlignment="Right"
                            Kind="ChevronDownCircleOutline"
                            VerticalAlignment="Center"
                            Width="{TemplateBinding HeaderIconWidth}"/>
                    </Grid>
                </local:ToggleButtonEx>

                <ContentPresenter
                    x:Name="ExpandSite"
                    DockPanel.Dock="Bottom"
                    Focusable="false"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    Margin="{TemplateBinding Padding}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Visibility="Collapsed"/>
            </DockPanel>
        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" TargetName="border" Value="{Binding BackgroundInactive, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{Binding BorderBrushInactive, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>
                <Setter Property="Opacity" TargetName="border" Value="{Binding OpacityInactive, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>
                <Setter Property="TextBlock.Foreground" TargetName="ExpandSite" Value="{Binding ForegroundInactive, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>
            </Trigger>

            <Trigger Property="IsExpanded" Value="true">
                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
            </Trigger>

            <Trigger Property="ExpandDirection" Value="Right">
                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                <Setter Property="Grid.Column" TargetName="headerIcon" Value="0"/>
                <Setter Property="Grid.Row" TargetName="headerIcon" Value="0"/>
                <Setter Property="Grid.Column" TargetName="headerTitle" Value="0"/>
                <Setter Property="Grid.Row" TargetName="headerTitle" Value="1"/>
                <Setter Property="Width" TargetName="HeaderColumn0" Value="Auto"/>
                <Setter Property="Width" TargetName="HeaderColumn1" Value="0"/>
                <Setter Property="Height" TargetName="HeaderRow0" Value="Auto"/>
                <Setter Property="Height" TargetName="HeaderRow1" Value="*"/>
                <Setter Property="HorizontalAlignment" TargetName="headerTitle" Value="Center"/>
                <Setter Property="Kind" TargetName="headerIcon" Value="ChevronRightCircleOutline"/>
                <Setter Property="CornerRadius" TargetName="HeaderSite">
                    <Setter.Value>
                        <MultiBinding
                            Converter="{StaticResource InnerCornerRadiusConverter}"
                            ConverterParameter="topLeft;topRight:0;bottomLeft;bottomRight:0">
                            <Binding
                                Path="CornerRadius"
                                Mode="OneWay"
                                RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ExpanderEx}}"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>
            
            <Trigger Property="ExpandDirection" Value="Up">
                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                <Setter Property="Grid.Column" TargetName="headerIcon" Value="1"/>
                <Setter Property="Grid.Row" TargetName="headerIcon" Value="0"/>
                <Setter Property="Grid.Column" TargetName="headerTitle" Value="0"/>
                <Setter Property="Grid.Row" TargetName="headerTitle" Value="0"/>
                <Setter Property="Width" TargetName="HeaderColumn0" Value="*"/>
                <Setter Property="Width" TargetName="HeaderColumn1" Value="Auto"/>
                <Setter Property="Height" TargetName="HeaderRow0" Value="Auto"/>
                <Setter Property="Height" TargetName="HeaderRow1" Value="0"/>
                <Setter Property="Kind" TargetName="headerIcon" Value="ChevronUpCircleOutline"/>
                <Setter Property="CornerRadius" TargetName="HeaderSite">
                    <Setter.Value>
                        <MultiBinding
                            Converter="{StaticResource InnerCornerRadiusConverter}"
                            ConverterParameter="topLeft:0;topRight:0;bottomLeft;bottomRight">
                            <Binding
                                Path="CornerRadius"
                                Mode="OneWay"
                                RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ExpanderEx}}"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="ExpandDirection" Value="Left">
                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                <Setter Property="Grid.Column" TargetName="headerIcon" Value="0"/>
                <Setter Property="Grid.Row" TargetName="headerIcon" Value="0"/>
                <Setter Property="Grid.Column" TargetName="headerTitle" Value="0"/>
                <Setter Property="Grid.Row" TargetName="headerTitle" Value="1"/>
                <Setter Property="Width" TargetName="HeaderColumn0" Value="Auto"/>
                <Setter Property="Width" TargetName="HeaderColumn1" Value="0"/>
                <Setter Property="Height" TargetName="HeaderRow0" Value="Auto"/>
                <Setter Property="Height" TargetName="HeaderRow1" Value="*"/>
                <Setter Property="HorizontalAlignment" TargetName="headerTitle" Value="Center"/>
                <Setter Property="Kind" TargetName="headerIcon" Value="ChevronLeftCircleOutline"/>
                <Setter Property="CornerRadius" TargetName="HeaderSite">
                    <Setter.Value>
                        <MultiBinding
                            Converter="{StaticResource InnerCornerRadiusConverter}"
                            ConverterParameter="topLeft:0;topRight;bottomLeft:0;bottomRight">
                            <Binding
                                Path="CornerRadius"
                                Mode="OneWay"
                                RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ExpanderEx}}"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsExpanded" Value="true"/>
                    <Condition Property="ExpandDirection" Value="Right"/>
                </MultiTrigger.Conditions>
                <Setter Property="Kind" TargetName="headerIcon" Value="ChevronLeftCircleOutline"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsExpanded" Value="true"/>
                    <Condition Property="ExpandDirection" Value="Up"/>
                </MultiTrigger.Conditions>
                <Setter Property="Kind" TargetName="headerIcon" Value="ChevronDownCircleOutline"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsExpanded" Value="true"/>
                    <Condition Property="ExpandDirection" Value="Left"/>
                </MultiTrigger.Conditions>
                <Setter Property="Kind" TargetName="headerIcon" Value="ChevronRightCircleOutline"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsExpanded" Value="true"/>
                    <Condition Property="ExpandDirection" Value="Down"/>
                </MultiTrigger.Conditions>
                <Setter Property="Kind" TargetName="headerIcon" Value="ChevronUpCircleOutline"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ExpanderExStyle" TargetType="{x:Type local:ExpanderEx}">
        <Setter Property="Background" Value="{Binding DataContext.ThemeBackground, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BackgroundInactive" Value="{Binding DataContext.BackgroundInactive, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BorderBrush" Value="{Binding DataContext.ThemeBackgroundShade, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BorderBrushInactive" Value="{Binding DataContext.BackgroundInactive, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{Binding DataContext.ThemeForeground, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="ForegroundInactive" Value="{Binding DataContext.ForegroundInactive, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="HeaderBackground" Value="{Binding DataContext.ThemeBackgroundShade, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="HeaderBackgroundMouseOver" Value="{Binding DataContext.AccentBackgroundMouseOver, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="HeaderBackgroundPressed" Value="{Binding DataContext.AccentBackgroundPressed, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="HeaderBorderBrush" Value="{Binding DataContext.ThemeBackgroundShade, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="HeaderBorderBrushMouseOver" Value="{Binding DataContext.AccentBorderBrushMouseOver, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="HeaderBorderBrushPressed" Value="{Binding DataContext.AccentBorderBrushPressed, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="OpacityInactive" Value="{Binding DataContext.OpacityInactive, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="Template" Value="{StaticResource ExpanderEx.ControlTemplate}"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
    </Style>

</ResourceDictionary>