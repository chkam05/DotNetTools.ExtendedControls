<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:local="clr-namespace:chkam05.Tools.ControlsEx"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:theme="clr-namespace:chkam05.Tools.ControlsEx.Data.Theme"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <x:Static x:Key="ThemeMgr" Member="theme:ThemeManager.Instance"/>

    <ControlTemplate x:Key="ButtonExWithIcon.ControlTemplate" TargetType="{x:Type local:ButtonExWithIcon}">
        <Border
            x:Name="border"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{TemplateBinding CornerRadius}"
            Padding="{TemplateBinding Padding}"
            SnapsToDevicePixels="true">

            <Grid
                x:Name="contentGrid"
                HorizontalAlignment="Center"
                VerticalAlignment="Center">

                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="columnLeft" Width="Auto"/>
                    <ColumnDefinition x:Name="columnRight" Width="Auto"/>
                </Grid.ColumnDefinitions>

                <Grid.RowDefinitions>
                    <RowDefinition x:Name="rowTop" Height="Auto"/>
                    <RowDefinition x:Name="rowBottom" Height="Auto"/>
                </Grid.RowDefinitions>

                <materialDesign:PackIcon
                    x:Name="packIcon"
                    Foreground="{TemplateBinding Foreground}"
                    Grid.Column="0"
                    Grid.Row="0"
                    Height="{TemplateBinding IconHeight}"
                    HorizontalAlignment="{TemplateBinding HorizontalIconAlignment}"
                    Margin="{TemplateBinding IconMargin}"
                    Kind="{TemplateBinding IconKind}"
                    VerticalAlignment="{TemplateBinding VerticalIconAlignment}"
                    Width="{TemplateBinding IconWidth}"/>

                <ContentPresenter
                    x:Name="contentPresenter"
                    ClipToBounds="True"
                    Focusable="False"
                    Grid.Column="1"
                    Grid.Row="0"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    Margin="{TemplateBinding ContentMargin}"
                    RecognizesAccessKey="True"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                
            </Grid>
        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="HasContent" Value="false">
                <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="packIcon" Property="Grid.Column" Value="0"/>
                <Setter TargetName="packIcon" Property="Grid.Row" Value="0"/>
                <Setter TargetName="packIcon" Property="Margin" Value="0"/>
            </Trigger>

            <Trigger Property="IconKind" Value="{x:Static materialDesign:PackIconKind.None}">
                <Setter TargetName="contentPresenter" Property="Margin" Value="0"/>
                <Setter TargetName="packIcon" Property="Visibility" Value="Collapsed"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasContent" Value="true"/>
                    <Condition Property="IconPosition" Value="Left"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="contentPresenter" Property="Grid.Column" Value="1"/>
                <Setter TargetName="contentPresenter" Property="Grid.Row" Value="0"/>
                <Setter TargetName="packIcon" Property="Grid.Column" Value="0"/>
                <Setter TargetName="packIcon" Property="Grid.Row" Value="0"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasContent" Value="true"/>
                    <Condition Property="IconPosition" Value="Top"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="contentPresenter" Property="Grid.Column" Value="0"/>
                <Setter TargetName="contentPresenter" Property="Grid.Row" Value="1"/>
                <Setter TargetName="packIcon" Property="Grid.Column" Value="0"/>
                <Setter TargetName="packIcon" Property="Grid.Row" Value="0"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasContent" Value="true"/>
                    <Condition Property="IconPosition" Value="Right"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="contentPresenter" Property="Grid.Column" Value="0"/>
                <Setter TargetName="contentPresenter" Property="Grid.Row" Value="0"/>
                <Setter TargetName="packIcon" Property="Grid.Column" Value="1"/>
                <Setter TargetName="packIcon" Property="Grid.Row" Value="0"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasContent" Value="true"/>
                    <Condition Property="IconPosition" Value="Bottom"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="contentPresenter" Property="Grid.Column" Value="0"/>
                <Setter TargetName="contentPresenter" Property="Grid.Row" Value="0"/>
                <Setter TargetName="packIcon" Property="Grid.Column" Value="0"/>
                <Setter TargetName="packIcon" Property="Grid.Row" Value="1"/>
            </MultiTrigger>

            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" TargetName="border" Value="{Binding BackgroundInactive, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonExWithIcon}}}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{Binding BorderBrushInactive, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonExWithIcon}}}"/>
                <Setter Property="Foreground" TargetName="packIcon" Value="{Binding ForegroundInactive, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonExWithIcon}}}"/>
                <Setter Property="Opacity" TargetName="border" Value="{Binding OpacityInactive, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonExWithIcon}}}"/>
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{Binding ForegroundInactive, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonExWithIcon}}}"/>
            </Trigger>

            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonExWithIcon}}}"/>
            </Trigger>

            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" TargetName="border" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonExWithIcon}}}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonExWithIcon}}}"/>
                <Setter Property="Foreground" TargetName="packIcon" Value="{Binding ForegroundMouseOver, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonExWithIcon}}}"/>
                <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{Binding ForegroundMouseOver, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonExWithIcon}}}"/>
            </Trigger>

            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" TargetName="border" Value="{Binding BackgroundPressed, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonExWithIcon}}}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{Binding BorderBrushPressed, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonExWithIcon}}}"/>
                <Setter Property="Foreground" TargetName="packIcon" Value="{Binding ForegroundPressed, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonExWithIcon}}}"/>
                <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{Binding ForegroundPressed, RelativeSource={RelativeSource AncestorType={x:Type local:ButtonExWithIcon}}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ButtonExWithIconStyle" TargetType="{x:Type local:ButtonExWithIcon}">
        <Setter Property="Background" Value="{Binding DataContext.AccentBackground, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BackgroundInactive" Value="{Binding DataContext.BackgroundInactive, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BackgroundMouseOver" Value="{Binding DataContext.AccentBackgroundMouseOver, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BackgroundPressed" Value="{Binding DataContext.AccentBackgroundPressed, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BorderBrush" Value="{Binding DataContext.AccentBorderBrush, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BorderBrushInactive" Value="{Binding DataContext.BackgroundInactive, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding DataContext.AccentBorderBrushMouseOver, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BorderBrushPressed" Value="{Binding DataContext.AccentBorderBrushPressed, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="4"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{Binding DataContext.AccentForeground, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="ForegroundInactive" Value="{Binding DataContext.ForegroundInactive, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="ForegroundMouseOver" Value="{Binding DataContext.AccentForegroundMouseOver, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="ForegroundPressed" Value="{Binding DataContext.AccentForegroundPressed, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalIconAlignment" Value="Center"/>
        <Setter Property="OpacityInactive" Value="{Binding DataContext.OpacityInactive, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="MinHeight" Value="23"/>
        <Setter Property="MinWidth" Value="75"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Template" Value="{StaticResource ButtonExWithIcon.ControlTemplate}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalIconAlignment" Value="Center"/>
    </Style>

</ResourceDictionary>