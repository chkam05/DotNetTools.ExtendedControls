<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:conv="clr-namespace:chkam05.Tools.ControlsEx.Converters"
    xmlns:local="clr-namespace:chkam05.Tools.ControlsEx"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:theme="clr-namespace:chkam05.Tools.ControlsEx.Data.Theme"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <conv:CheckMarkTypePackIconConverter x:Key="CheckMarkTypePackIconConverter"/>
    <x:Static x:Key="ThemeMgr" Member="theme:ThemeManager.Instance"/>

    <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070"/>
    <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="#FFF3F9FF"/>
    <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="#FF5593FF"/>
    <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="#FFD9ECFF"/>
    <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#FF3C77DD"/>
    <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC"/>
    <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070"/>

    <ControlTemplate x:Key="CheckBoxEx.ControlTemplate" TargetType="{x:Type local:CheckBoxEx}">
        <Border
            x:Name="border"
            Background="Transparent"
            BorderBrush="Transparent"
            BorderThickness="{TemplateBinding BorderThickness}"
            SnapsToDevicePixels="True">

            <Grid
                SnapsToDevicePixels="True">

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <materialDesign:PackIcon
                    x:Name="checkMark"
                    Foreground="{TemplateBinding Background}"
                    HorizontalAlignment="Center"
                    Grid.Column="0"
                    Kind="{TemplateBinding CheckMarkTypeIcon, Converter={StaticResource CheckMarkTypePackIconConverter}}"
                    Margin="0,0,4,0"
                    VerticalAlignment="Center"/>

                <ContentPresenter
                    x:Name="contentPresenter"
                    Grid.Column="1"
                    Focusable="False"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    Margin="{TemplateBinding Padding}"
                    RecognizesAccessKey="True"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>

        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="HasContent" Value="false">
                <Setter Property="Margin" TargetName="checkMark" Value="0"/>
                <Setter Property="Visibility" TargetName="contentPresenter" Value="Collapsed"/>
            </Trigger>
            
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" TargetName="checkMark" Value="{Binding BackgroundInactive, RelativeSource={RelativeSource AncestorType={x:Type local:CheckBoxEx}}}"/>
                <Setter Property="Opacity" TargetName="border" Value="{Binding OpacityInactive, RelativeSource={RelativeSource AncestorType={x:Type local:CheckBoxEx}}}"/>
                <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{Binding ForegroundInactive, RelativeSource={RelativeSource AncestorType={x:Type local:CheckBoxEx}}}"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="false"/>
                    <Condition Property="IsChecked" Value="{x:Null}"/>
                </MultiTrigger.Conditions>
                <Setter
                    Property="Kind"
                    TargetName="checkMark"
                    Value="{Binding CheckMarkTypeIcon, 
                        RelativeSource={RelativeSource AncestorType={x:Type local:CheckBoxEx}},
                        Converter={StaticResource CheckMarkTypePackIconConverter},
                        ConverterParameter=disabled}"/>
            </MultiTrigger>

            <Trigger Property="IsChecked" Value="true">
                <Setter
                    Property="Kind"
                    TargetName="checkMark"
                    Value="{Binding CheckMarkTypeIcon, 
                        RelativeSource={RelativeSource AncestorType={x:Type local:CheckBoxEx}},
                        Converter={StaticResource CheckMarkTypePackIconConverter},
                        ConverterParameter=checked}"/>
            </Trigger>

            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource AncestorType={x:Type local:CheckBoxEx}}}"/>
            </Trigger>

            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" TargetName="checkMark" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource AncestorType={x:Type local:CheckBoxEx}}}"/>
                <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{Binding ForegroundMouseOver, RelativeSource={RelativeSource AncestorType={x:Type local:CheckBoxEx}}}"/>
            </Trigger>

            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Foreground" TargetName="checkMark" Value="{Binding BackgroundPressed, RelativeSource={RelativeSource AncestorType={x:Type local:CheckBoxEx}}}"/>
                <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{Binding ForegroundPressed, RelativeSource={RelativeSource AncestorType={x:Type local:CheckBoxEx}}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="CheckBoxExStyle" TargetType="{x:Type local:CheckBoxEx}">
        <Setter Property="Background" Value="{Binding DataContext.AccentBackground, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BackgroundInactive" Value="{Binding DataContext.BackgroundInactive, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BackgroundMouseOver" Value="{Binding DataContext.AccentBackgroundMouseOver, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BackgroundPressed" Value="{Binding DataContext.AccentBackgroundPressed, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding DataContext.AccentBorderBrushMouseOver, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{Binding DataContext.ThemeForeground, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="ForegroundInactive" Value="{Binding DataContext.ForegroundInactive, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="ForegroundMouseOver" Value="{Binding DataContext.ThemeForegroundMouseOver, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="ForegroundPressed" Value="{Binding DataContext.ThemeForegroundPressed, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="OpacityInactive" Value="{Binding DataContext.OpacityInactive, Mode=OneWay, Source={StaticResource ThemeMgr}}"/>
        <Setter Property="Template" Value="{StaticResource CheckBoxEx.ControlTemplate}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

</ResourceDictionary>