<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:chkam05.Tools.ControlsEx"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <SolidColorBrush x:Key="ComboBoxEx.Background">White</SolidColorBrush>
    <SolidColorBrush x:Key="ComboBoxEx.BorderBrush">#FF0078D7</SolidColorBrush>
    <SolidColorBrush x:Key="ComboBoxEx.Foreground">Black</SolidColorBrush>
    <sys:Double x:Key="ComboBoxEx.ToggleButton.Width">20</sys:Double>
    
    <Style x:Key="ComboBoxEx.FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="2"
                        SnapsToDevicePixels="true"
                        Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        StrokeDashArray="1 2"
                        StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxEx.ToggleButton.Template" TargetType="{x:Type ToggleButton}">
        <Border
            x:Name="templateRoot"
            Background="Transparent"
            BorderBrush="Transparent"
            BorderThickness="0"
            CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"
            SnapsToDevicePixels="True">

            <Border
                x:Name="splitBorder"
                Background="{TemplateBinding Background}"
                BorderBrush="Transparent"
                BorderThickness="0"
                CornerRadius="{Binding ButtonCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"
                HorizontalAlignment="Right"
                Margin="0,-1,-1,-1"
                SnapsToDevicePixels="True"
                Width="{StaticResource ComboBoxEx.ToggleButton.Width}">

                <materialDesign:PackIcon
                    x:Name="arrow"
                    Foreground="{TemplateBinding Foreground}"
                    HorizontalAlignment="Center"
                    Kind="ChevronDown"
                    SnapsToDevicePixels="True"
                    VerticalAlignment="Center"/>

            </Border>
        </Border>
        <ControlTemplate.Triggers>

            <!-- Is Mouse Over & Enabled. -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}" Value="true"/>
                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}" Value="true"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" TargetName="splitBorder" Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
            </MultiDataTrigger>

            <!-- Is Pressed & Enabled. -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}" Value="true"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" TargetName="splitBorder" Value="{Binding SelectedBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
            </MultiDataTrigger>

            <!-- Is Disabled. -->
            <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}" Value="false">
                <Setter Property="Opacity" TargetName="arrow" Value="0.56"/>
            </DataTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ComboBoxEx.ToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxEx.ToggleButton.Template}"/>
    </Style>

    <Style x:Key="EditableComboBoxEx.TextBox" TargetType="{x:Type TextBox}">
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <local:ScrollViewerEx
                        x:Name="PART_ContentHost"
                        Focusable="false"
                        HorizontalScrollBarVisibility="Hidden"
                        VerticalScrollBarVisibility="Hidden"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxEx.Template" TargetType="{x:Type local:ComboBoxEx}">
        <Border
            x:Name="templateBorder"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{TemplateBinding CornerRadius}">

            <Grid
                x:Name="templateRoot"
                SnapsToDevicePixels="true">

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                </Grid.ColumnDefinitions>

                <Popup
                    x:Name="PART_Popup"
                    AllowsTransparency="true"
                    Grid.ColumnSpan="2"
                    IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    Margin="1"
                    Placement="Bottom"
                    PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">

                    <Themes:SystemDropShadowChrome
                        x:Name="shadow"
                        Color="Transparent"
                        MaxHeight="{TemplateBinding MaxDropDownHeight}"
                        MinWidth="{Binding ActualWidth, ElementName=templateRoot}">

                        <Border
                            x:Name="dropDownBorder"
                            Background="{TemplateBinding DropDownBackground}"
                            BorderBrush="{TemplateBinding DropDownBorderBrush}"
                            BorderThickness="{TemplateBinding DropDownBorderThickness}"
                            CornerRadius="{TemplateBinding DropDownCornerRadius}"
                            Margin="0,2,0,0"
                            Padding="1">

                            <local:ScrollViewerEx
                                x:Name="DropDownScrollViewer"
                                ClipToBounds="True">

                                <Grid
                                    x:Name="grid"
                                    RenderOptions.ClearTypeHint="Enabled">

                                    <Canvas
                                        x:Name="canvas"
                                        HorizontalAlignment="Left"
                                        Height="0"
                                        VerticalAlignment="Top"
                                        Width="0">

                                        <Rectangle
                                            x:Name="opaqueRect"
                                            Fill="Transparent"
                                            Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                            Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                    </Canvas>

                                    <ItemsPresenter
                                        x:Name="ItemsPresenter"
                                        KeyboardNavigation.DirectionalNavigation="Contained"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                        TextBlock.Foreground="{TemplateBinding Foreground}"/>

                                </Grid>
                            </local:ScrollViewerEx>
                        </Border>
                    </Themes:SystemDropShadowChrome>
                </Popup>

                <ToggleButton
                    x:Name="toggleButton"
                    Background="{TemplateBinding BorderBrush}"
                    BorderBrush="Transparent"
                    BorderThickness="0"
                    Foreground="{TemplateBinding Background}"
                    Grid.ColumnSpan="2"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    Style="{StaticResource ComboBoxEx.ToggleButton}"/>

                <ContentPresenter
                    x:Name="contentPresenter"
                    Content="{TemplateBinding SelectionBoxItem}"
                    ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                    ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    IsHitTestVisible="false"
                    Margin="{TemplateBinding Padding}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    TextBlock.Foreground="{TemplateBinding Foreground}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>

        </Border>
        <ControlTemplate.Triggers>

            <!-- Is Focused With Keyboard. -->
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="Background" TargetName="templateBorder" Value="{Binding MouseOverBackground, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
                <Setter Property="BorderBrush" TargetName="templateBorder" Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
                <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{Binding MouseOverForeground, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
            </Trigger>

            <!-- Is Mouse Over. -->
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" TargetName="templateBorder" Value="{Binding MouseOverBackground, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
                <Setter Property="BorderBrush" TargetName="templateBorder" Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
                <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{Binding MouseOverForeground, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
            </Trigger>
            
            <!-- Is Selected -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False"/>
                    <Condition Property="IsSelectionActive" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="templateBorder" Value="{Binding SelectedBackground, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
                <Setter Property="BorderBrush" TargetName="templateBorder" Value="{Binding SelectedBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
                <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{Binding SelectedForeground, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
            </MultiTrigger>

            <!-- Is Selected And Mouse Over -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsSelectionActive" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="templateBorder" Value="{Binding MouseOverBackground, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
                <Setter Property="BorderBrush" TargetName="templateBorder" Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
                <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{Binding MouseOverForeground, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
            </MultiTrigger>

            <!-- Has Drop Shadow. -->
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="Transparent"/>
            </Trigger>

            <!-- Has Items. -->
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>

            <!-- Is Groupping. -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>

            <!-- Can Scroll Content. -->
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>

            <!-- Is Disabled. -->
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="EditableComboBoxEx.Template" TargetType="{x:Type local:ComboBoxEx}">
        <Border
            x:Name="templateBorder"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{TemplateBinding CornerRadius}">

            <Grid
                x:Name="templateRoot"
                SnapsToDevicePixels="true">

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                </Grid.ColumnDefinitions>

                <Popup
                    x:Name="PART_Popup"
                    AllowsTransparency="true"
                    Grid.ColumnSpan="2"
                    IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                    PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                    Placement="Bottom">

                    <Themes:SystemDropShadowChrome
                        x:Name="shadow"
                        Color="Transparent"
                        MaxHeight="{TemplateBinding MaxDropDownHeight}"
                        MinWidth="{Binding ActualWidth, ElementName=templateRoot}">

                        <Border
                            x:Name="dropDownBorder"
                            Background="{TemplateBinding DropDownBackground}"
                            BorderBrush="{TemplateBinding DropDownBorderBrush}"
                            BorderThickness="{TemplateBinding DropDownBorderThickness}"
                            CornerRadius="{TemplateBinding DropDownCornerRadius}"
                            Margin="0,2,0,0"
                            Padding="1">

                            <local:ScrollViewerEx
                                x:Name="DropDownScrollViewer"
                                ClipToBounds="True">

                                <Grid
                                    x:Name="grid"
                                    RenderOptions.ClearTypeHint="Enabled">

                                    <Canvas
                                        x:Name="canvas"
                                        HorizontalAlignment="Left"
                                        Height="0"
                                        VerticalAlignment="Top"
                                        Width="0">

                                        <Rectangle
                                            x:Name="opaqueRect"
                                            Fill="Transparent"
                                            Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                            Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                    </Canvas>

                                    <ItemsPresenter
                                        x:Name="ItemsPresenter"
                                        KeyboardNavigation.DirectionalNavigation="Contained"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                        TextBlock.Foreground="{TemplateBinding Foreground}"/>

                                </Grid>
                            </local:ScrollViewerEx>
                        </Border>
                    </Themes:SystemDropShadowChrome>
                </Popup>

                <ToggleButton
                    x:Name="toggleButton"
                    Background="{TemplateBinding BorderBrush}"
                    BorderBrush="Transparent"
                    BorderThickness="0"
                    Foreground="{TemplateBinding Background}"
                    Grid.ColumnSpan="2"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    Style="{StaticResource ComboBoxEx.ToggleButton}"/>

                <Border
                    x:Name="border">

                    <TextBox
                        x:Name="PART_EditableTextBox"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                        Margin="{TemplateBinding Padding}"
                        Style="{StaticResource EditableComboBoxEx.TextBox}"
                        VerticalContentAlignment="Center"/>
                </Border>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>

            <!-- Is Focused With Keyboard. -->
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="Background" TargetName="templateBorder" Value="{Binding MouseOverBackground, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
                <Setter Property="BorderBrush" TargetName="templateBorder" Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
                <Setter Property="Foreground" TargetName="PART_EditableTextBox" Value="{Binding MouseOverForeground, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
            </Trigger>

            <!-- Is Mouse Over. -->
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" TargetName="templateBorder" Value="{Binding MouseOverBackground, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
                <Setter Property="BorderBrush" TargetName="templateBorder" Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
                <Setter Property="Foreground" TargetName="PART_EditableTextBox" Value="{Binding MouseOverForeground, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
            </Trigger>

            <!-- Is Selected -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False"/>
                    <Condition Property="IsSelectionActive" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="templateBorder" Value="{Binding SelectedBackground, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
                <Setter Property="BorderBrush" TargetName="templateBorder" Value="{Binding SelectedBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
                <Setter Property="Foreground" TargetName="PART_EditableTextBox" Value="{Binding SelectedForeground, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
            </MultiTrigger>

            <!-- Is Selected And Mouse Over -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsSelectionActive" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="templateBorder" Value="{Binding MouseOverBackground, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
                <Setter Property="BorderBrush" TargetName="templateBorder" Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
                <Setter Property="Foreground" TargetName="PART_EditableTextBox" Value="{Binding MouseOverForeground, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEx}}}"/>
            </MultiTrigger>

            <!-- Has Drop Shadow. -->
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="Transparent"/>
            </Trigger>

            <!-- Has Items. -->
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>

            <!-- Is Groupping. -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>

            <!-- Can Scroll Content. -->
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>

            <!-- Is Disabled. -->
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ComboBoxExStyle" TargetType="{x:Type local:ComboBoxEx}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ComboBoxEx.FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ComboBoxEx.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ComboBoxEx.BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{StaticResource ComboBoxEx.Foreground}"/>
        <Setter Property="MinWidth" Value="192"/>
        <Setter Property="Padding" Value="6,3,5,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxEx.Template}"/>

        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Template" Value="{StaticResource EditableComboBoxEx.Template}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>