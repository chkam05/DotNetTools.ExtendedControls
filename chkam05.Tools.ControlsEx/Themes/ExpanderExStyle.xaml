<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:converters="clr-namespace:chkam05.Tools.ControlsEx.Converters"
    xmlns:local="clr-namespace:chkam05.Tools.ControlsEx"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:static="clr-namespace:chkam05.Tools.ControlsEx.Static">

    <converters:CornerRadiusSideConverter x:Key="CornerRadiusSideConverter"/>

    <!-- FOCUS VISUAL. -->
    <Style x:Key="ExpanderEx.HeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle
                            Margin="0"
                            SnapsToDevicePixels="true"
                            Stroke="Black"
                            StrokeDashArray="1 2"
                            StrokeThickness="1"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- RIGHT HEADER STYLE. -->
    <Style x:Key="ExpanderEx.RightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                        Padding="{TemplateBinding Padding}">
                        <Grid
                            Background="Transparent"
                            SnapsToDevicePixels="False">

                            <Grid.LayoutTransform>
                                <RotateTransform Angle="-90" />
                            </Grid.LayoutTransform>

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <materialDesign:PackIcon
                                x:Name="icon"
                                Foreground="{Binding ArrowBrush, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                Grid.Column="0"
                                Height="{Binding ArrowHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                HorizontalAlignment="Center"
                                Kind="{Binding ArrowCollapsed, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                Margin="{Binding ArrowMargin, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MaxHeight="{Binding ArrowMaxHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MaxWidth="{Binding ArrowMaxWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MinHeight="{Binding ArrowMinHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MinWidth="{Binding ArrowMinWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                SnapsToDevicePixels="false"
                                VerticalAlignment="Center"
                                Width="{Binding ArrowWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}">

                                <materialDesign:PackIcon.LayoutTransform>
                                    <RotateTransform Angle="90" />
                                </materialDesign:PackIcon.LayoutTransform>
                            </materialDesign:PackIcon>

                            <materialDesign:PackIcon
                                x:Name="headerIcon"
                                Foreground="{Binding HeaderForeground, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                Grid.Column="1"
                                Height="{Binding IconHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                HorizontalAlignment="Center"
                                Kind="{Binding IconKind, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                Margin="{Binding IconMargin, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MaxHeight="{Binding IconMaxHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MaxWidth="{Binding IconMaxWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MinHeight="{Binding IconMinHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MinWidth="{Binding IconMinWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                VerticalAlignment="Center"
                                Width="{Binding IconWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}">

                                <materialDesign:PackIcon.LayoutTransform>
                                    <RotateTransform Angle="90" />
                                </materialDesign:PackIcon.LayoutTransform>
                            </materialDesign:PackIcon>

                            <ContentPresenter
                                Grid.Column="2"
                                HorizontalAlignment="{Binding HeaderHorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                Margin="{Binding HeaderContentMargin, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="True"
                                TextBlock.FontFamily="{Binding HeaderFontFamily, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                TextBlock.FontSize="{Binding HeaderFontSize, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                TextBlock.FontStretch="{Binding HeaderFontStretch, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                TextBlock.FontStyle="{Binding HeaderFontStyle, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                TextBlock.FontWeight="{Binding HeaderFontWeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                VerticalAlignment="{Binding HeaderVerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>

                        <!-- Arrow Position. -->
                        <DataTrigger Value="{x:Static static:ExpanderArrowPosition.Right}">
                            <DataTrigger.Binding>
                                <Binding
                                    Mode="OneWay"
                                    Path="ArrowPosition"
                                    RelativeSource="{RelativeSource AncestorType={x:Type local:ExpanderEx}}"/>
                            </DataTrigger.Binding>
                            <Setter Property="Grid.Column" TargetName="icon"  Value="3"/>
                        </DataTrigger>

                        <!-- Icon Visibility -->
                        <DataTrigger Value="{x:Static materialDesign:PackIconKind.None}">
                            <DataTrigger.Binding>
                                <Binding
                                    Mode="OneWay"
                                    Path="IconKind"
                                    RelativeSource="{RelativeSource AncestorType={x:Type local:ExpanderEx}}"/>
                            </DataTrigger.Binding>
                            <Setter Property="Visibility" TargetName="headerIcon" Value="Collapsed"/>
                        </DataTrigger>

                        <!-- Is Checked. -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="CornerRadius" TargetName="border" Value="{Binding CornerRadius, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}, Converter={StaticResource CornerRadiusSideConverter}, ConverterParameter={x:Static converters:CornerRadiusSideConverter.LeftSide}}"/>
                            <Setter Property="Kind" TargetName="icon" Value="{Binding ArrowExpanded, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>
                        </Trigger>

                        <!-- Is Mouse Over. -->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" TargetName="icon" Value="{Binding ArrowMouseOverBrush, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>
                        </Trigger>

                        <!-- Is Pressed. -->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" TargetName="icon" Value="{Binding ArrowPressedBrush, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>
                        </Trigger>

                        <!-- Is Enabled. -->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="icon" Value="0.56"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- UP HEADER STYLE. -->
    <Style x:Key="ExpanderEx.UpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                        Padding="{TemplateBinding Padding}">
                        <Grid
                            Background="Transparent"
                            SnapsToDevicePixels="False">

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>

                            <materialDesign:PackIcon
                                x:Name="icon"
                                Foreground="{Binding ArrowBrush, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                Grid.Column="0"
                                Height="{Binding ArrowHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                HorizontalAlignment="Center"
                                Kind="{Binding ArrowCollapsed, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                Margin="{Binding ArrowMargin, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MaxHeight="{Binding ArrowMaxHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MaxWidth="{Binding ArrowMaxWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MinHeight="{Binding ArrowMinHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MinWidth="{Binding ArrowMinWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                SnapsToDevicePixels="false"
                                VerticalAlignment="Center"
                                Width="{Binding ArrowWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>

                            <materialDesign:PackIcon
                                x:Name="headerIcon"
                                Foreground="{Binding HeaderForeground, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                Grid.Column="1"
                                Height="{Binding IconHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                HorizontalAlignment="Center"
                                Kind="{Binding IconKind, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                Margin="{Binding IconMargin, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MaxHeight="{Binding IconMaxHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MaxWidth="{Binding IconMaxWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MinHeight="{Binding IconMinHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MinWidth="{Binding IconMinWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                VerticalAlignment="Center"
                                Width="{Binding IconWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>

                            <ContentPresenter
                                Grid.Column="2"
                                HorizontalAlignment="{Binding HeaderHorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                Margin="{Binding HeaderContentMargin, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="True"
                                TextBlock.FontFamily="{Binding HeaderFontFamily, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                TextBlock.FontSize="{Binding HeaderFontSize, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                TextBlock.FontStretch="{Binding HeaderFontStretch, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                TextBlock.FontStyle="{Binding HeaderFontStyle, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                TextBlock.FontWeight="{Binding HeaderFontWeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                VerticalAlignment="{Binding HeaderVerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>

                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>

                        <!-- Arrow Position. -->
                        <DataTrigger Value="{x:Static static:ExpanderArrowPosition.Right}">
                            <DataTrigger.Binding>
                                <Binding
                                    Mode="OneWay"
                                    Path="ArrowPosition"
                                    RelativeSource="{RelativeSource AncestorType={x:Type local:ExpanderEx}}"/>
                            </DataTrigger.Binding>
                            <Setter Property="Grid.Column" TargetName="icon"  Value="3"/>
                        </DataTrigger>

                        <!-- Icon Visibility -->
                        <DataTrigger Value="{x:Static materialDesign:PackIconKind.None}">
                            <DataTrigger.Binding>
                                <Binding
                                    Mode="OneWay"
                                    Path="IconKind"
                                    RelativeSource="{RelativeSource AncestorType={x:Type local:ExpanderEx}}"/>
                            </DataTrigger.Binding>
                            <Setter Property="Visibility" TargetName="headerIcon" Value="Collapsed"/>
                        </DataTrigger>

                        <!-- Is Checked. -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="CornerRadius" TargetName="border" Value="{Binding CornerRadius, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}, Converter={StaticResource CornerRadiusSideConverter}, ConverterParameter={x:Static converters:CornerRadiusSideConverter.BottomSide}}"/>
                            <Setter Property="Kind" TargetName="icon" Value="{Binding ArrowExpanded, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>
                        </Trigger>

                        <!-- Is Mouse Over. -->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" TargetName="icon" Value="{Binding ArrowMouseOverBrush, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>
                        </Trigger>

                        <!-- Is Pressed. -->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" TargetName="icon" Value="{Binding ArrowPressedBrush, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>
                        </Trigger>

                        <!-- Is Enabled. -->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="icon" Value="0.56"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- LEFT HEADER STYLE. -->
    <Style x:Key="ExpanderEx.LeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                        Padding="{TemplateBinding Padding}">
                        <Grid
                            Background="Transparent"
                            SnapsToDevicePixels="False">

                            <Grid.LayoutTransform>
                                <RotateTransform Angle="90" />
                            </Grid.LayoutTransform>

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>

                            <materialDesign:PackIcon
                                x:Name="icon"
                                Foreground="{Binding ArrowBrush, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                Grid.Column="0"
                                Height="{Binding ArrowHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                HorizontalAlignment="Center"
                                Kind="{Binding ArrowCollapsed, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                Margin="{Binding ArrowMargin, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MaxHeight="{Binding ArrowMaxHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MaxWidth="{Binding ArrowMaxWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MinHeight="{Binding ArrowMinHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MinWidth="{Binding ArrowMinWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                SnapsToDevicePixels="false"
                                VerticalAlignment="Center"
                                Width="{Binding ArrowWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}">
                                
                                <materialDesign:PackIcon.LayoutTransform>
                                    <RotateTransform Angle="-90" />
                                </materialDesign:PackIcon.LayoutTransform>
                            </materialDesign:PackIcon>

                            <materialDesign:PackIcon
                                x:Name="headerIcon"
                                Foreground="{Binding HeaderForeground, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                Grid.Column="1"
                                Height="{Binding IconHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                HorizontalAlignment="Center"
                                Kind="{Binding IconKind, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                Margin="{Binding IconMargin, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MaxHeight="{Binding IconMaxHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MaxWidth="{Binding IconMaxWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MinHeight="{Binding IconMinHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MinWidth="{Binding IconMinWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                VerticalAlignment="Center"
                                Width="{Binding IconWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}">

                                <materialDesign:PackIcon.LayoutTransform>
                                    <RotateTransform Angle="-90" />
                                </materialDesign:PackIcon.LayoutTransform>
                            </materialDesign:PackIcon>

                            <ContentPresenter
                                Grid.Column="2"
                                HorizontalAlignment="{Binding HeaderHorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                Margin="{Binding HeaderContentMargin, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="True"
                                TextBlock.FontFamily="{Binding HeaderFontFamily, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                TextBlock.FontSize="{Binding HeaderFontSize, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                TextBlock.FontStretch="{Binding HeaderFontStretch, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                TextBlock.FontStyle="{Binding HeaderFontStyle, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                TextBlock.FontWeight="{Binding HeaderFontWeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                VerticalAlignment="{Binding HeaderVerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>
                        
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>

                        <!-- Arrow Position. -->
                        <DataTrigger Value="{x:Static static:ExpanderArrowPosition.Right}">
                            <DataTrigger.Binding>
                                <Binding
                                    Mode="OneWay"
                                    Path="ArrowPosition"
                                    RelativeSource="{RelativeSource AncestorType={x:Type local:ExpanderEx}}"/>
                            </DataTrigger.Binding>
                            <Setter Property="Grid.Column" TargetName="icon"  Value="3"/>
                        </DataTrigger>

                        <!-- Icon Visibility -->
                        <DataTrigger Value="{x:Static materialDesign:PackIconKind.None}">
                            <DataTrigger.Binding>
                                <Binding
                                    Mode="OneWay"
                                    Path="IconKind"
                                    RelativeSource="{RelativeSource AncestorType={x:Type local:ExpanderEx}}"/>
                            </DataTrigger.Binding>
                            <Setter Property="Visibility" TargetName="headerIcon" Value="Collapsed"/>
                        </DataTrigger>

                        <!-- Is Checked. -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="CornerRadius" TargetName="border" Value="{Binding CornerRadius, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}, Converter={StaticResource CornerRadiusSideConverter}, ConverterParameter={x:Static converters:CornerRadiusSideConverter.RightSide}}"/>
                            <Setter Property="Kind" TargetName="icon" Value="{Binding ArrowExpanded, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>
                        </Trigger>

                        <!-- Is Mouse Over. -->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" TargetName="icon" Value="{Binding ArrowMouseOverBrush, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>
                        </Trigger>

                        <!-- Is Pressed. -->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" TargetName="icon" Value="{Binding ArrowPressedBrush, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>
                        </Trigger>

                        <!-- Is Enabled. -->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="icon" Value="0.56"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- DOWN HEADER STYLE. -->
    <Style x:Key="ExpanderEx.DownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                        Padding="{TemplateBinding Padding}">
                        <Grid
                            Background="Transparent"
                            SnapsToDevicePixels="False">

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>

                            <materialDesign:PackIcon
                                x:Name="icon"
                                Foreground="{Binding ArrowBrush, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                Grid.Column="0"
                                Height="{Binding ArrowHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                HorizontalAlignment="Center"
                                Kind="{Binding ArrowCollapsed, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                Margin="{Binding ArrowMargin, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MaxHeight="{Binding ArrowMaxHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MaxWidth="{Binding ArrowMaxWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MinHeight="{Binding ArrowMinHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MinWidth="{Binding ArrowMinWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                SnapsToDevicePixels="false"
                                VerticalAlignment="Center"
                                Width="{Binding ArrowWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>

                            <materialDesign:PackIcon
                                x:Name="headerIcon"
                                Foreground="{Binding HeaderForeground, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                Grid.Column="1"
                                Height="{Binding IconHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                HorizontalAlignment="Center"
                                Kind="{Binding IconKind, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                Margin="{Binding IconMargin, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MaxHeight="{Binding IconMaxHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MaxWidth="{Binding IconMaxWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MinHeight="{Binding IconMinHeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                MinWidth="{Binding IconMinWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                VerticalAlignment="Center"
                                Width="{Binding IconWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>

                            <ContentPresenter
                                Grid.Column="2"
                                HorizontalAlignment="{Binding HeaderHorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                Margin="{Binding HeaderContentMargin, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="True"
                                TextBlock.FontFamily="{Binding HeaderFontFamily, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                TextBlock.FontSize="{Binding HeaderFontSize, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                TextBlock.FontStretch="{Binding HeaderFontStretch, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                TextBlock.FontStyle="{Binding HeaderFontStyle, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                TextBlock.FontWeight="{Binding HeaderFontWeight, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"
                                VerticalAlignment="{Binding HeaderVerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>
                            
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>

                        <!-- Arrow Position. -->
                        <DataTrigger Value="{x:Static static:ExpanderArrowPosition.Right}">
                            <DataTrigger.Binding>
                                <Binding
                                    Mode="OneWay"
                                    Path="ArrowPosition"
                                    RelativeSource="{RelativeSource AncestorType={x:Type local:ExpanderEx}}"/>
                            </DataTrigger.Binding>
                            <Setter Property="Grid.Column" TargetName="icon"  Value="3"/>
                        </DataTrigger>
                        
                        <!-- Icon Visibility -->
                        <DataTrigger Value="{x:Static materialDesign:PackIconKind.None}">
                            <DataTrigger.Binding>
                                <Binding
                                    Mode="OneWay"
                                    Path="IconKind"
                                    RelativeSource="{RelativeSource AncestorType={x:Type local:ExpanderEx}}"/>
                            </DataTrigger.Binding>
                            <Setter Property="Visibility" TargetName="headerIcon" Value="Collapsed"/>
                        </DataTrigger>

                        <!-- Is Checked. -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="CornerRadius" TargetName="border" Value="{Binding CornerRadius, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}, Converter={StaticResource CornerRadiusSideConverter}, ConverterParameter={x:Static converters:CornerRadiusSideConverter.TopSide}}"/>
                            <Setter Property="Kind" TargetName="icon" Value="{Binding ArrowExpanded, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>
                        </Trigger>

                        <!-- Is Mouse Over. -->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" TargetName="icon" Value="{Binding ArrowMouseOverBrush, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>
                        </Trigger>

                        <!-- Is Pressed. -->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" TargetName="icon" Value="{Binding ArrowPressedBrush, RelativeSource={RelativeSource AncestorType={x:Type local:ExpanderEx}}}"/>
                        </Trigger>

                        <!-- Is Enabled. -->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="icon" Value="0.56"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- EXPANDER CONTROL TEMPLATE. -->
    <ControlTemplate x:Key="ExpanderEx.ControlTemplate" TargetType="{x:Type local:ExpanderEx}">
        <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{TemplateBinding CornerRadius}"
            SnapsToDevicePixels="true">

            <DockPanel>
                <ToggleButton
                    x:Name="HeaderSite"
                    Background="{TemplateBinding HeaderBackground}"
                    BorderBrush="{TemplateBinding HeaderBorderBrush}"
                    BorderThickness="{TemplateBinding HeaderBorderThickness}"
                    ContentTemplate="{TemplateBinding HeaderTemplate}"
                    ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                    Content="{TemplateBinding Header}"
                    DockPanel.Dock="Top"
                    Foreground="{TemplateBinding HeaderForeground}"
                    FocusVisualStyle="{StaticResource ExpanderEx.HeaderFocusVisual}"
                    HorizontalContentAlignment="Stretch"
                    IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    MinWidth="0"
                    MinHeight="0"
                    Padding="{TemplateBinding HeaderPadding}"
                    Style="{StaticResource ExpanderEx.DownHeaderStyle}"
                    VerticalContentAlignment="Stretch"/>

                <ContentPresenter
                    x:Name="ExpandSite"
                    DockPanel.Dock="Bottom"
                    Focusable="false"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    Margin="{TemplateBinding Padding}"
                    Visibility="Collapsed"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>

            <!-- Is Expanded. -->
            <Trigger Property="IsExpanded" Value="true">
                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
            </Trigger>

            <!-- Direction Left. -->
            <Trigger Property="ExpandDirection" Value="Left">
                <Setter Property="ArrowCollapsed" Value="ChevronLeft"/>
                <Setter Property="ArrowExpanded" Value="ChevronRight"/>
                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderEx.LeftHeaderStyle}"/>
            </Trigger>

            <!-- Direction Up. -->
            <Trigger Property="ExpandDirection" Value="Up">
                <Setter Property="ArrowCollapsed" Value="ChevronUp"/>
                <Setter Property="ArrowExpanded" Value="ChevronDown"/>
                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderEx.UpHeaderStyle}"/>
            </Trigger>

            <!-- Direction Right. -->
            <Trigger Property="ExpandDirection" Value="Right">
                <Setter Property="ArrowCollapsed" Value="ChevronRight"/>
                <Setter Property="ArrowExpanded" Value="ChevronLeft"/>
                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderEx.RightHeaderStyle}"/>
            </Trigger>

            <!-- Is Disabled. -->
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.56"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- EXPANDER STYLE. -->
    <Style x:Key="ExpanderExStyle" TargetType="{x:Type local:ExpanderEx}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Template" Value="{StaticResource ExpanderEx.ControlTemplate}"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
    </Style>

</ResourceDictionary>